// Generated by gencpp from file samana_msgs/imu_small.msg
// DO NOT EDIT!


#ifndef SAMANA_MSGS_MESSAGE_IMU_SMALL_H
#define SAMANA_MSGS_MESSAGE_IMU_SMALL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace samana_msgs
{
template <class ContainerAllocator>
struct imu_small_
{
  typedef imu_small_<ContainerAllocator> Type;

  imu_small_()
    : header()
    , quaternion_x(0.0)
    , quaternion_y(0.0)
    , quaternion_z(0.0)
    , quaternion_w(0.0)
    , linear_acceleration_x(0.0)
    , linear_acceleration_y(0.0)
    , linear_acceleration_z(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)  {
    }
  imu_small_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , quaternion_x(0.0)
    , quaternion_y(0.0)
    , quaternion_z(0.0)
    , quaternion_w(0.0)
    , linear_acceleration_x(0.0)
    , linear_acceleration_y(0.0)
    , linear_acceleration_z(0.0)
    , angular_velocity_x(0.0)
    , angular_velocity_y(0.0)
    , angular_velocity_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _quaternion_x_type;
  _quaternion_x_type quaternion_x;

   typedef float _quaternion_y_type;
  _quaternion_y_type quaternion_y;

   typedef float _quaternion_z_type;
  _quaternion_z_type quaternion_z;

   typedef float _quaternion_w_type;
  _quaternion_w_type quaternion_w;

   typedef float _linear_acceleration_x_type;
  _linear_acceleration_x_type linear_acceleration_x;

   typedef float _linear_acceleration_y_type;
  _linear_acceleration_y_type linear_acceleration_y;

   typedef float _linear_acceleration_z_type;
  _linear_acceleration_z_type linear_acceleration_z;

   typedef float _angular_velocity_x_type;
  _angular_velocity_x_type angular_velocity_x;

   typedef float _angular_velocity_y_type;
  _angular_velocity_y_type angular_velocity_y;

   typedef float _angular_velocity_z_type;
  _angular_velocity_z_type angular_velocity_z;





  typedef boost::shared_ptr< ::samana_msgs::imu_small_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samana_msgs::imu_small_<ContainerAllocator> const> ConstPtr;

}; // struct imu_small_

typedef ::samana_msgs::imu_small_<std::allocator<void> > imu_small;

typedef boost::shared_ptr< ::samana_msgs::imu_small > imu_smallPtr;
typedef boost::shared_ptr< ::samana_msgs::imu_small const> imu_smallConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samana_msgs::imu_small_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samana_msgs::imu_small_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace samana_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'samana_msgs': ['/home/combinacijus/Documents/ROS/samana_ws/src/samana_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::samana_msgs::imu_small_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samana_msgs::imu_small_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samana_msgs::imu_small_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samana_msgs::imu_small_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samana_msgs::imu_small_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samana_msgs::imu_small_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samana_msgs::imu_small_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c052128fb9568718800fa0ba7071e271";
  }

  static const char* value(const ::samana_msgs::imu_small_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc052128fb9568718ULL;
  static const uint64_t static_value2 = 0x800fa0ba7071e271ULL;
};

template<class ContainerAllocator>
struct DataType< ::samana_msgs::imu_small_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samana_msgs/imu_small";
  }

  static const char* value(const ::samana_msgs::imu_small_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samana_msgs::imu_small_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"std_msgs/Header header\n"
"float32 quaternion_x\n"
"float32 quaternion_y\n"
"float32 quaternion_z\n"
"float32 quaternion_w\n"
"float32 linear_acceleration_x\n"
"float32 linear_acceleration_y\n"
"float32 linear_acceleration_z\n"
"float32 angular_velocity_x\n"
"float32 angular_velocity_y\n"
"float32 angular_velocity_z\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::samana_msgs::imu_small_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samana_msgs::imu_small_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.quaternion_x);
      stream.next(m.quaternion_y);
      stream.next(m.quaternion_z);
      stream.next(m.quaternion_w);
      stream.next(m.linear_acceleration_x);
      stream.next(m.linear_acceleration_y);
      stream.next(m.linear_acceleration_z);
      stream.next(m.angular_velocity_x);
      stream.next(m.angular_velocity_y);
      stream.next(m.angular_velocity_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_small_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samana_msgs::imu_small_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samana_msgs::imu_small_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "quaternion_x: ";
    Printer<float>::stream(s, indent + "  ", v.quaternion_x);
    s << indent << "quaternion_y: ";
    Printer<float>::stream(s, indent + "  ", v.quaternion_y);
    s << indent << "quaternion_z: ";
    Printer<float>::stream(s, indent + "  ", v.quaternion_z);
    s << indent << "quaternion_w: ";
    Printer<float>::stream(s, indent + "  ", v.quaternion_w);
    s << indent << "linear_acceleration_x: ";
    Printer<float>::stream(s, indent + "  ", v.linear_acceleration_x);
    s << indent << "linear_acceleration_y: ";
    Printer<float>::stream(s, indent + "  ", v.linear_acceleration_y);
    s << indent << "linear_acceleration_z: ";
    Printer<float>::stream(s, indent + "  ", v.linear_acceleration_z);
    s << indent << "angular_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_x);
    s << indent << "angular_velocity_y: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_y);
    s << indent << "angular_velocity_z: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMANA_MSGS_MESSAGE_IMU_SMALL_H
