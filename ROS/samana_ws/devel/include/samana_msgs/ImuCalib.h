// Generated by gencpp from file samana_msgs/ImuCalib.msg
// DO NOT EDIT!


#ifndef SAMANA_MSGS_MESSAGE_IMUCALIB_H
#define SAMANA_MSGS_MESSAGE_IMUCALIB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samana_msgs
{
template <class ContainerAllocator>
struct ImuCalib_
{
  typedef ImuCalib_<ContainerAllocator> Type;

  ImuCalib_()
    : sys(0)
    , gyr(0)
    , acc(0)
    , mag(0)
    , temp(0)  {
    }
  ImuCalib_(const ContainerAllocator& _alloc)
    : sys(0)
    , gyr(0)
    , acc(0)
    , mag(0)
    , temp(0)  {
  (void)_alloc;
    }



   typedef uint8_t _sys_type;
  _sys_type sys;

   typedef uint8_t _gyr_type;
  _gyr_type gyr;

   typedef uint8_t _acc_type;
  _acc_type acc;

   typedef uint8_t _mag_type;
  _mag_type mag;

   typedef int8_t _temp_type;
  _temp_type temp;





  typedef boost::shared_ptr< ::samana_msgs::ImuCalib_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samana_msgs::ImuCalib_<ContainerAllocator> const> ConstPtr;

}; // struct ImuCalib_

typedef ::samana_msgs::ImuCalib_<std::allocator<void> > ImuCalib;

typedef boost::shared_ptr< ::samana_msgs::ImuCalib > ImuCalibPtr;
typedef boost::shared_ptr< ::samana_msgs::ImuCalib const> ImuCalibConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samana_msgs::ImuCalib_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samana_msgs::ImuCalib_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace samana_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'samana_msgs': ['/home/combinacijus/Documents/ROS/samana_ws/src/samana_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::samana_msgs::ImuCalib_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samana_msgs::ImuCalib_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samana_msgs::ImuCalib_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samana_msgs::ImuCalib_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samana_msgs::ImuCalib_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samana_msgs::ImuCalib_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samana_msgs::ImuCalib_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7764c0234b4e443d9ef754fa0119997d";
  }

  static const char* value(const ::samana_msgs::ImuCalib_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7764c0234b4e443dULL;
  static const uint64_t static_value2 = 0x9ef754fa0119997dULL;
};

template<class ContainerAllocator>
struct DataType< ::samana_msgs::ImuCalib_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samana_msgs/ImuCalib";
  }

  static const char* value(const ::samana_msgs::ImuCalib_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samana_msgs::ImuCalib_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 sys\n"
"uint8 gyr\n"
"uint8 acc\n"
"uint8 mag\n"
"int8 temp\n"
;
  }

  static const char* value(const ::samana_msgs::ImuCalib_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samana_msgs::ImuCalib_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sys);
      stream.next(m.gyr);
      stream.next(m.acc);
      stream.next(m.mag);
      stream.next(m.temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImuCalib_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samana_msgs::ImuCalib_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samana_msgs::ImuCalib_<ContainerAllocator>& v)
  {
    s << indent << "sys: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sys);
    s << indent << "gyr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gyr);
    s << indent << "acc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acc);
    s << indent << "mag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mag);
    s << indent << "temp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMANA_MSGS_MESSAGE_IMUCALIB_H
