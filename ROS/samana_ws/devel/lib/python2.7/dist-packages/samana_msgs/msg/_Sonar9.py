# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from samana_msgs/Sonar9.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Sonar9(genpy.Message):
  _md5sum = "9475c4b12aca5b9b235ea1a9e9e22280"
  _type = "samana_msgs/Sonar9"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header Header
int16 dist1
int16 dist2
int16 dist3
int16 dist4
int16 dist5
int16 dist6
int16 dist7
int16 dist8
int16 dist9
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['Header','dist1','dist2','dist3','dist4','dist5','dist6','dist7','dist8','dist9']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Header,dist1,dist2,dist3,dist4,dist5,dist6,dist7,dist8,dist9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sonar9, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.dist1 is None:
        self.dist1 = 0
      if self.dist2 is None:
        self.dist2 = 0
      if self.dist3 is None:
        self.dist3 = 0
      if self.dist4 is None:
        self.dist4 = 0
      if self.dist5 is None:
        self.dist5 = 0
      if self.dist6 is None:
        self.dist6 = 0
      if self.dist7 is None:
        self.dist7 = 0
      if self.dist8 is None:
        self.dist8 = 0
      if self.dist9 is None:
        self.dist9 = 0
    else:
      self.Header = std_msgs.msg.Header()
      self.dist1 = 0
      self.dist2 = 0
      self.dist3 = 0
      self.dist4 = 0
      self.dist5 = 0
      self.dist6 = 0
      self.dist7 = 0
      self.dist8 = 0
      self.dist9 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9h().pack(_x.dist1, _x.dist2, _x.dist3, _x.dist4, _x.dist5, _x.dist6, _x.dist7, _x.dist8, _x.dist9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.dist1, _x.dist2, _x.dist3, _x.dist4, _x.dist5, _x.dist6, _x.dist7, _x.dist8, _x.dist9,) = _get_struct_9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9h().pack(_x.dist1, _x.dist2, _x.dist3, _x.dist4, _x.dist5, _x.dist6, _x.dist7, _x.dist8, _x.dist9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.dist1, _x.dist2, _x.dist3, _x.dist4, _x.dist5, _x.dist6, _x.dist7, _x.dist8, _x.dist9,) = _get_struct_9h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9h = None
def _get_struct_9h():
    global _struct_9h
    if _struct_9h is None:
        _struct_9h = struct.Struct("<9h")
    return _struct_9h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
