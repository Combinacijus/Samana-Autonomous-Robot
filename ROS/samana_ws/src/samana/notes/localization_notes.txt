Look here for graph http://docs.ros.org/melodic/api/robot_localization/html/_images/navsat_transform_workflow.png
ekf_local:   odom->base_link transform
ekf_global:  map->odom transform

ekf_localization_node:
	and - android
	rob - robot sensors
	nav - navsat_transform_node
	ekf - ekf_localization_node
	xxx ->  =  published by xxx

	Sensors input:
		rob -> (/odom) 				<param name="odom0" value="/robot/odometry"/>
		rob -> (/imu) 				<param name="imu0" value="/robot/imu"/>
		[For global node only] nav -> (/odometry/gps)      <param name="odom1" value="/navsat/odometry/gps"/> 
		
	Published Topics:
		odometry/filtered (nav_msgs/Odometry)       <param name="odometry/filtered" value="/odometry/filtered_local"/>
		accel/filtered (geometry_msgs/AccelWithCovarianceStamped) (if enabled)


navsat_transform_node:
	It produces an odometry message in coordinates that are consistent with your robot’s world frame.

	Subscribed topics:
		and -> gps/fix  	      (/android/fix/fixed)  A sensor_msgs/NavSatFix message containing your robot’s GPS coordinates
		rob -> imu/data 		  (/imu)              	A sensor_msgs/Imu message with orientation data with an absolute (earth-referenced) heading
		ekf -> /odometry/filtered (/odometry/local)	    A nav_msgs/Odometry message of your robot’s current position. This is needed in the event that your first GPS reading comes after your robot has attained some non-zero pose.
										   				A nav_msgs/Odometry message that contains the robot’s current position estimate in the frame specified by its start location (typically the output of a robot_localization state estimation node).
	
	Published topics:
		odometry/gps              A nav_msgs/Odometry message containing the GPS coordinates of your robot, transformed into its world coordinate frame.
								  This message can be directly fused into robot_localization‘s state estimation nodes.
		gps/filtered (optional)   A sensor_msgs/NavSatFix message containing your robot’s world frame position, transformed into GPS coordinates
	
	
	Datum: <rosparam param="datum">[55.944904, -3.186693, 0.0, map, base_link]</rosparam>
		   Means that world frame (usually map) origin will be at specified lat lat and heading

	REP-105 & REP-103:
		 x-axis east, y-axis north, and the z-axis up
		 earth -> map -> odom -> base_link
		 CCW rotation orientation increases

	To set filter pose:
		set_pose - By issuing a geometry_msgs/PoseWithCovarianceStamped message to the set_pose topic, users can manually set the state of the filter. This is useful for resetting the filter during testing, and allows for interaction with rviz. Alternatively, the state estimation nodes advertise a SetPose service, whose type is robot_localization/SetPose.



	X,      Y,    Z,
	roll, pitch, yaw,
	X˙,     Y˙,   Z˙,
	roll˙,pitch˙,yaw˙,
	X¨,     Y¨,   Z¨ 


fix /android/imu frame_id
rosrun topic_tools transform /android/imu /android/imu/fixed sensor_msgs/Imu 'sensor_msgs.msg.Imu(header=std_msgs.msg.Header(seq=m.header.seq,stamp=m.header.stamp,frame_id="imu"),orientation=m.orientation, orientation_covariance=m.orientation_covariance, angular_velocity=m.angular_velocity, angular_velocity_covariance=m.angular_velocity_covariance, linear_acceleration=m.linear_acceleration, linear_acceleration_covariance=m.linear_acceleration_covariance)' --import sensor_msgs std_msgs
fix /android/fix frame_id
rosrun topic_tools transform /android/fix /android/fix/fixed sensor_msgs/NavSatFix 'sensor_msgs.msg.NavSatFix(header=std_msgs.msg.Header(seq=m.header.seq,stamp=m.header.stamp,frame_id="gps"), status=m.status, latitude=m.latitude, longitude=m.longitude, altitude=m.altitude, position_covariance=m.position_covariance, position_covariance_type=m.position_covariance_type)' --import sensor_msgs std_msgs

For sensors only bag file:
rosbag filter <bag_name>.bag <bag_name_out>.bag "topic == '/android/fix' or topic == '/bump' or topic == '/fix' or topic == '/imu_calib' or topic == '/imu_data' or topic == '/odom_data' or topic == '/rc' or topic == '/sonar'"