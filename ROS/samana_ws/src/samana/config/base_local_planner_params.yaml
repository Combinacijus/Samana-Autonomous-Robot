DWAPlannerROS:
  # Velocity limits. NOTE: tuning
  max_vel_x: 0.27
  min_vel_x: -0.27
  max_vel_y: 0.0
  min_vel_y: 0.0
  max_vel_trans:  0.27
  min_vel_trans:  0.03  # Min ~0.02m/s
  max_vel_theta: 1.3  
  min_vel_theta: 0.07    # Min ~0.02m/s

  # Acceleration limits. NOTE: tuning
  acc_lim_x: 2.3
  acc_lim_y: 0.0
  acc_lim_theta: 9.0

  # Goal Tolerance Parametes. NOTE: tuning
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.5
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters. NOTE: tuning
  sim_time: 1.0
  sim_granularity: 0.025
  vx_samples: 15
  vy_samples: 0
  vth_samples: 15
  controller_frequency: 10.0

  # Trajectory Scoring Parameters
  meter_scoring: true
  path_distance_bias: 32.0
  goal_distance_bias: 20.0
  occdist_scale: 0.01
  # forward_point_distance: 0.325
  forward_point_distance: 0.15
  stop_time_buffer: 0.2
  scaling_speed: 0.2
  max_scaling_factor: 0.2

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05

  # Debugging
  publish_traj_pc : false
  publish_cost_grid_pc: false  # Not working? just white dots



# PoseFollower:
#     collision_planner:
#       # set this to true if you're using a holonomic robot
#       holonomic_robot: false
#       acc_lim_x: 0.7
#       acc_lim_y: 0.0
#       acc_lim_theta: 1.0
#       max_vel_x: 0.55
#       min_vel_x: 0.04
#       max_vel_theta: 1.0
#       min_vel_theta: -1.0

#       path_distance_bias: 0.61
#       goal_distance_bias: 0.81
#       occdist_scale: 0.011


#     k_trans: 2.0
#     k_rot: 1.0

#     # within this distance to the goal, finally rotate to the goal heading (also, we've reached our goal only if we're within this dist)
#     tolerance_trans: 0.25

#     # we've reached our goal only if we're within this angular distance
#     tolerance_rot: 0.5

#     # we've reached our goal only if we're within range for this long and stopped
#     tolerance_timeout: 0.5

    

#     # number of samples (scaling factors of our current desired twist) to check the validity of 
#     samples: 10

#     # go no faster than this
#     max_vel_lin: 0.55
#     max_vel_th: 0.5

#     # minimum velocities to keep from getting stuck
#     min_vel_lin: 0.05
#     min_vel_th: 0.1

#     # if we're rotating in place, go at least this fast to avoid getting stuck
#     min_in_place_vel_th: 0.1

#     # when we're near the end and would be trying to go no faster than this translationally, just rotate in place instead
#     in_place_trans_vel: 0.1

#     # we're "stopped" if we're going slower than these velocities
#     trans_stopped_velocity: 0.03
#     rot_stopped_velocity: 0.03

#     # if this is true, we don't care whether we go backwards or forwards
#     allow_backwards: true

#     # if this is true, turn in place to face the new goal instead of arcing toward it
#     turn_in_place_first: true

#     # if turn_in_place_first is true, turn in place if our heading is more than this far from facing the goal location
#     max_heading_diff_before_moving: 0.4



# TrajectoryPlannerROS:
#   max_vel_x: 0.55
#   min_vel_x: -0.2

#   max_vel_theta:  1.0
#   min_vel_theta: -1.0
#   min_in_place_vel_theta: 1.0

#   acc_lim_x: 0.7
#   acc_lim_y: 0.0
#   acc_lim_theta: 1.0

# # Goal Tolerance Parameters
#   meter_scoring: true
#   xy_goal_tolerance: 0.20
#   yaw_goal_tolerance: 0.5

# # Differential-drive robot configuration
#   holonomic_robot: false

# # Forward Simulation Parameters
#   sim_time: 1.0
#   vx_samples: 15
#   vtheta_samples: 20
#   sim_granularity: 0.025

